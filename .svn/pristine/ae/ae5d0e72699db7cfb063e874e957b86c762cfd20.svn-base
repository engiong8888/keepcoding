package cn.gnw.push.iosmdm.consumer.controller;

import cn.gnw.pub.base.utils.SpringUtil;
import cn.gnw.push.api.utils.ConfigUtils;
import cn.gnw.push.api.utils.IosMdmUtils;
import cn.gnw.push.iosmdm.consumer.interfaces.PushIosMdmServiceClient;
import com.alibaba.fastjson.JSONObject;
import com.jiangge.utils.FileUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.text.MessageFormat;

/**
 * 用户操作
 *
 * @author: xiaowb
 * @mail xiaowb@txtws.com
 * @date: 2018-11-06 15:02
 */
@RestController
@RequestMapping(value = "/user")
public class UserController {

    private Log logger = LogFactory.getLog(UserController.class);

    @Value("${filePath}")
    private String filePath;

    private PushIosMdmServiceClient pushIosMdmserviceClient = SpringUtil.getBean(PushIosMdmServiceClient.class);
    /**
     * 下载设备控制描述文件功能
     *
     * @param request
     */
    @GetMapping("/download")
    public void downConfig(HttpServletRequest request, HttpServletResponse response){
        String uuid = request.getParameter("uid") == null ? "" : request.getParameter("uid");
        String source = request.getParameter("source") == null ? "" : request.getParameter("source");
        String resultStr = pushIosMdmserviceClient.downConfig(uuid, source);
        JSONObject jsonObject = JSONObject.parseObject(resultStr);
        int status = jsonObject.getIntValue("status");
        if(status != -1){
            File file = new File(filePath);
            if(!file.exists()){
                file.mkdir();
            }
            String content = jsonObject.getString("content");
            logger.info("下载证书内容：" + content);
            String oldPath =  filePath + "/" + uuid + ".mobileconfig";
            String newPath =  filePath + "/" + uuid + "Signed.mobileconfig";
            try {
                boolean createSuccess = IosMdmUtils.createMobileConfigFile(oldPath,content);
                String configPath = this.getClass().getResource("/ios-mdm-tool").getPath();
                String crtPath = configPath + ConfigUtils.mdmProperties().getProperty("APNS_CRT");
                String keyPath = configPath + ConfigUtils.mdmProperties().getProperty("APNS_KEY");
                String pemPath = configPath + ConfigUtils.mdmProperties().getProperty("APNS_PEM");
                if(createSuccess){
                    logger.info("----------------------签名mobileconfig文件 start---------------------");
                    String oldCmd = "openssl smime -sign -in {0} -out {1} -signer {2} -inkey {3} -certfile {4} -outform der -nodetach";
                    String newCmd = MessageFormat.format(oldCmd,oldPath,newPath,crtPath,keyPath,pemPath);
                    logger.info("OpenSSL：\n" + newCmd);
                    //Runtime.getRuntime().exec(newCmd);
                    FileUtils.copyFile(oldPath, newPath);
                    logger.info("----------------------签名mobileconfig文件 end---------------------");
                }
                response.setHeader("content-type", "application/x-apple-aspen-config");
                response.setCharacterEncoding("UTF-8");
                String configTitle = "MDMApp_" + uuid;
                response.setHeader("Content-Disposition", "attachment; filename=" + configTitle + ".mobileconfig");
                //**获取配置文件动态组装参数**//
                //**写入文件**//
                java.io.FileInputStream fis = new java.io.FileInputStream(newPath);
                java.io.OutputStream os = response.getOutputStream();
                byte[] b = new byte[1024];
                int i = 0;
                while ((i = fis.read(b)) > 0) { os.write(b, 0, i); }
                logger.info("-------------------Download MobileConfig File End---------------");
                fis.close();
                os.flush();
                os.close();
            }catch (Exception e){
                logger.error("关闭流异常",e);
            }
        }
    }
}
