package cn.gnw.push.iosmdm.provider.config;

import cn.gnw.push.api.entity.Constants;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.DirectExchange;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * RabbitMQ配置类
 *
 * @author: xiaowb
 * @mail xiaowb@txtws.com
 * @date: 2018-12-20 16:04
 */
@Configuration
@ConfigurationProperties(prefix = "spring.rabbitmq")
public class RabbitMQConfig{

    private String host;
    private int port;
    private String username;
    private String password;
    private String virtualHost;

    @Bean
    public ConnectionFactory connectionFactory() {
        CachingConnectionFactory connectionFactory = new CachingConnectionFactory(host, port);
        connectionFactory.setUsername(username);
        connectionFactory.setPassword(password);
        connectionFactory.setVirtualHost(virtualHost);
        connectionFactory.setPublisherConfirms(true);
        return connectionFactory;
    }

    @Bean
    public RabbitTemplate rabbitTemplate() {
        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory());
        rabbitTemplate.setMessageConverter(new Jackson2JsonMessageConverter());
        rabbitTemplate.setExchange(Constants.RMQ_GNW_PUSH_IOSMDM_EXCHANGE);
        return rabbitTemplate;
    }

    @Bean
    DirectExchange directExchange() {
        return new DirectExchange(Constants.RMQ_GNW_PUSH_IOSMDM_EXCHANGE, true, false);
    }

    @Bean(name="toPushIosQueue")
    public Queue toPushIosQueue() {
        return new Queue(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, true, false, false);
    }

    @Bean
    Binding bindingExchange(@Qualifier("toPushIosQueue") Queue toPushIosQueue, DirectExchange directExchange) {
        return BindingBuilder.bind(toPushIosQueue).to(directExchange).with(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE);
    }

    /*@Bean
    public SimpleMessageListenerContainer messageContainer() {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory());
        container.setQueues(toPushIosQueue());
        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        return container;
    }*/

    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getVirtualHost() {
        return virtualHost;
    }

    public void setVirtualHost(String virtualHost) {
        this.virtualHost = virtualHost;
    }
}
