package cn.gnw.push.provider.controller;

import cn.gnw.pub.base.db.SimpleMybatisDao;
import cn.gnw.pub.base.impl.BaseBS;
import cn.gnw.pub.base.utils.CommonUtil;
import cn.gnw.pub.base.utils.SpringUtil;
import cn.gnw.pub.base.utils.StringUtil;
import cn.gnw.push.api.entity.Constants;
import cn.gnw.push.api.utils.RedisUtil;
import cn.gnw.push.provider.service.MiPushService;
import com.alibaba.fastjson.JSONObject;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;

/**
 * 小米推送
 *
 * @author: chengzd
 * @mail
 * @date: 2019-07-03 11:17
 */
@RestController
@RequestMapping(value = "/push/mi")
public class MiPushController extends BaseBS {

    /**
     * 根据platform推送，02苹果, 03安卓
     * 小米推送
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/send")
    @ResponseBody
    private String send(HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams){
        JSONObject result = new JSONObject();
        String[] argSymbols = {"platform", "push_type", "source"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if(verifyResult.getIntValue("status") != 0){
            result = verifyResult;
        } else {

            MiPushService miPushService = SpringUtil.getBean("miPushService", MiPushService.class);
            try {
                String source = rParams.getString("source");
                result = RedisUtil.getInstance().getConfigFromRedis(source, Constants.REDIS_MI_CONFIG);
                if(result.getIntValue("status") == 0) {
                    getLogger().info(new StringBuffer("获取小米配置config [Redis][key]{").append(Constants.REDIS_MI_CONFIG)
                            .append("}[config]{").append(result).append("}").toString());
                    String jgStr = result.getString("data");
                    if (!StringUtil.isBlank(jgStr)) {
                        JSONObject miConfig = JSONObject.parseObject(jgStr);
                        String androidAppKey = miConfig.getString("android_app_key");
                        String androidAppSecret = miConfig.getString("android_app_secret");
                        String androidPackage = miConfig.getString("android_package");
                        String iosAppKey = miConfig.getString("ios_app_key");
                        String iosAppSecret = miConfig.getString("ios_app_key");


                        String pushType = rParams.getString("push_type");
                        String title = rParams.getString("title");
                        String content = rParams.getString("content");
                        String description = rParams.getString("description");
                        String platform = rParams.getString("platform");
                        List<String> alias = (List<String>) rParams.get("alias");
                        List<String> accounts = (List<String>) rParams.get("accounts");
                        List<String> topics = (List<String>) rParams.get("topics");
                        List<String> devices = (List<String>) rParams.get("devices");
                        Map<String, String> extra = (Map<String, String>) rParams.get("extra");

                        List<String> regIdList = null;

                        if (devices != null && !devices.isEmpty()) {
                            SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
                            Map<String, Object> params = new HashMap<String, Object>();
                            params.put("devices", devices);
                            List<String> devList = simpleMybatisDao.selectList("push.mi.queryIdListByDevices", params, String.class);
                            if (devList.size() > 0) {
                                regIdList = devList;
                                System.out.println("regIdList.size():{}" + regIdList.size());
                            } else {
                                result.clear();
                                result.put("status", -1);
                                result.put("message", "未找到设备对应的Regist_id");
                                return result.toString();
                            }

                        }

                        JSONObject params = new JSONObject();
                        params.put("android_app_key", androidAppKey);
                        params.put("android_app_secret", androidAppSecret);
                        params.put("android_package", androidPackage);
                        params.put("ios_app_key", iosAppKey);
                        params.put("ios_app_secret", iosAppSecret);

                        params.put("push_type", pushType);
                        params.put("title", title);
                        params.put("content", content);
                        params.put("description", description);
                        params.put("source", source);
                        params.put("platform", platform);
                        params.put("alias", alias);
                        params.put("accounts", accounts);
                        params.put("topics", topics);
                        params.put("reg_ids", regIdList);
                        params.put("extra", extra);

                        getLogger().info("小米推送，参数：{}", JSONObject.toJSONString(params));
                        result = miPushService.send(params);
                        getLogger().debug("小米推送，结果: {}" + result.toString());
                    } else {
                        result.put("status", -1);
                        result.put("message", "xiaomi config in redis does not exist");
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
                getLogger().error("小米推送，失败：{}", e.getMessage());
                result.put("status", -1);
                result.put("message", e.getMessage());
            }
        }

        return result.toString();
    }

    /**
     * 绑定设备regId
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/binding")
    @ResponseBody
    private String bindingRegId (HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) {
        JSONObject result = new JSONObject();
        String[] argSymbols = {"device_id", "regist_id", "platform"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if (verifyResult.getIntValue("status") != 0) {
            result = verifyResult;
        } else {

            try {
                String deviceId = rParams.getString("device_id");
                Map<String, String> qParams = new HashMap<String, String>();
                qParams.put("device_id", deviceId);
                SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
                Map<String, String> bindRecord = simpleMybatisDao.selectOne("push.mi.queryBindRecord", qParams, Map.class);
                MiPushService miPushService = SpringUtil.getBean("miPushService", MiPushService.class);

                if(bindRecord != null ){
                    Map<String, String> params = new HashMap<String, String>();
                    params.put("bind_record_id", bindRecord.get("bind_record_id"));
                    params.put("device_id", rParams.getString("device_id"));
                    params.put("regist_id", rParams.getString("regist_id"));
                    getLogger().info("小米设备修改绑定regId，参数：{} ", params.toString());
                    result = miPushService.updateBindRecord(params);
                    getLogger().info("小米设备修改绑定regId，结果：{} ", result.toJSONString());
//                    result.put("status", -1);
//                    result.put("message", "已绑定设备");
                } else {
                    Map<String, String> params = new HashMap<String, String>();
                    params.put("device_id", rParams.getString("device_id"));
                    params.put("regist_id", rParams.getString("regist_id"));
                    params.put("platform", rParams.getString("platform"));
                    getLogger().info("小米设备绑定regist_id，参数：{} ", params.toString());
                    result = miPushService.bindRecord(params);
                    getLogger().info("小米设备绑定regist_id，结果：{} ", result.toJSONString());
                }
            } catch (Exception e) {
                e.printStackTrace();
                getLogger().error("小米设备绑定registId，失败：{}", e.getMessage());
                result.put("status", -1);
                result.put("message", e.getMessage());
            }

        }
        return result.toString();
    }

    /**
     * 解除绑定设备
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/unbind")
    @ResponseBody
    private String unbindDevice (HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) {
        JSONObject result = new JSONObject();
        String[] argSymbols = {"device_id"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if (verifyResult.getIntValue("status") != 0) {
            result = verifyResult;
        } else {

            try {
                String deviceId = rParams.getString("device_id");
                Map<String, String> qParams = new HashMap<String, String>();
                qParams.put("device_id", deviceId);
                SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
                Map<String, String> bindRecord = simpleMybatisDao.selectOne("push.mi.queryBindRecord", qParams, Map.class);

                if(bindRecord != null ){
                    MiPushService miPushService = SpringUtil.getBean("miPushService", MiPushService.class);

                    qParams.put("bind_record_id", bindRecord.get("bind_record_id"));
                    getLogger().info("小米设备解除绑定regId，参数：{} ", qParams.toString());
                    result = miPushService.unbind(qParams);
                    getLogger().info("小米设备解除绑定regId，结果：{} ", result.toJSONString());
                } else {
                    result.put("status", -1);
                    result.put("message", "设备未绑定regId");
                }
            } catch (Exception e) {
                e.printStackTrace();
                getLogger().error("小米设备绑定regId，失败：{}", e.getMessage());
                result.put("status", -1);
                result.put("message", e.getMessage());
            }

        }
        return result.toString();
    }

    public static Map<String, String> getAllRequestParam(HttpServletRequest request) {
        Map<String, String> res = new HashMap<String, String>();
        Enumeration<?> temp = request.getParameterNames();
        if (null != temp) {
            while (temp.hasMoreElements()) {
                String en = (String) temp.nextElement();
                String value = request.getParameter(en);
                res.put(en, value);
                // 在报文上送时，如果字段的值为空，则不上送<下面的处理为在获取所有参数数据时，判断若值为空，则删除这个字段>
                if (res.get(en) == null || "".equals(res.get(en))) {
                    res.remove(en);
                }
            }
        }
        return res;
    }
    /**
     * 消息送达回执
     * @param request
     * @param response
     * @return
     */
    @PostMapping("/notify")
    @ResponseBody
    private String miPushNotify(HttpServletRequest request, HttpServletResponse response) {
        JSONObject result = new JSONObject();

        Map<String, String> reqMap = getAllRequestParam(request);
        getLogger().info("小米送达回执RequestBody：{} ", reqMap.toString());
        try {

            JSONObject object = JSONObject.parseObject(reqMap.get("data"));
            List<Map<String,String>> listParams = new ArrayList<>();
            Map<String, String> params = null;

            Iterator<String> sIterator = object.keySet().iterator();
            while (sIterator.hasNext()) {
                // 获得key(msg_id)
                String key = sIterator.next();
                JSONObject values = JSONObject.parseObject(JSONObject.toJSONString(object.get(key)));
                params = new HashMap();
                params.put("msg_id", key);
                params.put("is_reach", "1");
                params.put("param", values.getString("param"));
                params.put("targets", values.getString("targets"));
                params.put("jobkey", values.getString("jobkey"));
                params.put("bar_status", values.getString("barStatus"));
                params.put("time_stamp", values.getString("timeStamp"));
                listParams.add(params);
            }

            MiPushService miPushService = SpringUtil.getBean("miPushService", MiPushService.class);
            getLogger().info("小米送达回执，参数：{} ", JSONObject.toJSONString(reqMap));
            result = miPushService.notify(listParams);
            getLogger().info("小米送达回执，结果：{} ", result.toJSONString());
        } catch (Exception e) {
            e.printStackTrace();
            getLogger().error("小米送达回执，失败：{}", e.getMessage());
            result.put("status", -1);
            result.put("message", e.getMessage());
        }
        return result.toString();
    }

    /**
     * 更新小米 redis缓存
     * @param request
     * @param response
     * @return
     */
    @PostMapping("/update/mi_config")
    @ResponseBody
    public String updateRedisMiConfig(HttpServletRequest request, HttpServletResponse response){
        JSONObject result = new JSONObject();

        try {
//            String source = rParams.getString("source");
            JSONObject params = new JSONObject();
            params.put("enabled", "1");
            SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
            List<Map> mailConfigList = simpleMybatisDao.selectList("push.mi.queryPushMiConfig", params, Map.class);
            if(mailConfigList != null){
                result = RedisUtil.getInstance().updateMiConfigToRedis(Constants.REDIS_MI_CONFIG, mailConfigList);
            }else {
                result.put("status", -1);
                result.put("message", "xiaomi config is null");
            }

        } catch (Exception e) {
            e.printStackTrace();
            getLogger().error("小米redis更新，失败：{}", e.getMessage());
            result.put("status", -1);
            result.put("message", e.getMessage());
        }
        return result.toString();
    }

    /**
     * 获取小米推送记录
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/query/record")
    @ResponseBody
    public String getPushMailRecord(HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) {
        JSONObject result = new JSONObject();
        String[] argSymbols = {"source", "limit", "pos"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if(verifyResult.getIntValue("status") != 0){
            result = verifyResult;
        } else {
            try {

                String limit = rParams.getString("limit");
                JSONObject qParams = new JSONObject();

                if(!"-1".equals(limit)) {
                    qParams.put("pos", rParams.getInteger("pos"));
                    qParams.put("limit", Integer.valueOf(limit));
                }
                qParams.put("source", rParams.getString("source"));
                qParams.put("regist_id", rParams.getString("regist_id"));
                qParams.put("platform", rParams.getString("platform"));
                qParams.put("title", rParams.getString("title"));
                qParams.put("content", rParams.getString("content"));
                qParams.put("status", rParams.getString("status"));
                qParams.put("is_reach", rParams.getString("is_reach"));
                qParams.put("remark", rParams.getString("remark"));
                SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);

                JSONObject cParams = new JSONObject();
                cParams.put("source", rParams.getString("source"));
                Map<String, String> miConfig = simpleMybatisDao.selectOne("push.mi.queryPushMiConfig", cParams, Map.class);
                if(miConfig != null) {
//                    qParams.put("app_id", miConfig.get("app_id"));
                    getLogger().info(new StringBuffer("华为推送流水查询，参数：").append(JSONObject.toJSONString(qParams)).toString());

                    Integer dataCount = simpleMybatisDao.selectOne("push.mi.queryPushMiRecordCount", qParams, Integer.class);
                    List<Map> miRecordList = simpleMybatisDao.selectList("push.mi.queryPushMiRecord", qParams, Map.class);
                    if (miRecordList == null) {
                        result.put("status",-1);
                        result.put("message","暂无小米推送记录！");
                    } else {
                        result.put("status", 0);
                        result.put("message", "ok");
                        result.put("data", miRecordList);
                        result.put("count", miRecordList.size());
                        result.put("total", dataCount);
                    }
                } else {
                    result.put("status", -1);
                    result.put("message", "获取小米配置信息错误！");
                }
            } catch (Exception e) {
                e.printStackTrace();
                getLogger().error("获取小米推送记录失败：{}", e.getMessage());
            }
        }
        getLogger().info(new StringBuffer("小米推送流水查询，结果：").append(result.toJSONString()).toString());
        return result.toString();
    }

    public static void main (String [] args){
        String str = "{\"scm518165626638194452q\":{\"param\":\"value2\",\"barStatus\":\"Enable\",\"type\":1,\"targets\":\"h/2mIQuAeoqz1Za7AwLuHVUgaXMdA3pcNUim5wZI22kK6eoiXtDrnE7QISYUa0tK\",\"timestamp\":1562663823899}}";
        JSONObject json = JSONObject.parseObject(str);
        System.out.println(json);
    }
}
