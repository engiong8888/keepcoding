package cn.gnw.push.provider.controller;

import cn.gnw.pub.base.db.SimpleMybatisDao;
import cn.gnw.pub.base.impl.BaseBS;
import cn.gnw.pub.base.utils.CommonUtil;
import cn.gnw.pub.base.utils.SpringUtil;
import cn.gnw.pub.base.utils.StringUtil;
import cn.gnw.push.api.entity.Constants;
import cn.gnw.push.api.entity.jsonschena.SchenaConfigUtil;
import cn.gnw.push.api.utils.RedisUtil;
import cn.gnw.push.provider.jsonSchema.JsonSchemaUtil;
import cn.gnw.push.provider.service.VivoPushService;
import com.alibaba.fastjson.JSONObject;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;

/**
 * vivo推送
 * @author: chengzd
 * @mail chengzd@txtws.com
 * @date: 2018-10-26 16:09
 */
@RestController
@RequestMapping(value = "/push/vivo")
public class VivoPushController extends BaseBS {

    /**
     * 发送消息(单推)
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/send")
    @ResponseBody
    private String send(HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) throws Exception {
        JSONObject result = new JSONObject();
        String[] argSymbols = {"notify_type", "title", "content", "skip_type", "source"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if (verifyResult.getIntValue("status") != 0) {
            result = verifyResult;
        } else {
            //jsonSchema验证
//            JsonSchemaUtil.validateJson(rParams.toJSONString(), SchenaConfigUtil.SCHENA_VIVO_SEND);

            String deviceId = rParams.getString("device_id");
            String alias = rParams.getString("alias");
            if(StringUtil.isBlank(deviceId) && StringUtil.isBlank(alias)){
                result.put("status", -1);
                result.put("message", "regId and alias are miss!");
                return result.toJSONString();
            }

            VivoPushService vivoPushService = SpringUtil.getBean("vivoPushService", VivoPushService.class);
            try {
                result = RedisUtil.getInstance().getConfigFromRedis(rParams.getString("source"), Constants.REDIS_VIVO_CONFIG);
                if(result.getIntValue("status") == 0) {

                    getLogger().info(new StringBuffer("获取vivo配置config [Redis][key]{").append(Constants.REDIS_VIVO_CONFIG)
                            .append("}[config]{").append(result).append("}").toString());
                    String huaweiStr = result.getString("data");
                    if (!StringUtil.isBlank(huaweiStr)) {
                        JSONObject huaweiConfig = JSONObject.parseObject(huaweiStr);

                        String appId = huaweiConfig.getString("app_id");
                        String appKey = huaweiConfig.getString("app_key");
                        String appSecret = huaweiConfig.getString("app_secret");

                        String regId = "";
                        if (!StringUtil.isBlank(deviceId)) {
                            SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
                            Map<String, String> params = new HashMap<String, String>();
                            params.put("deviceId", deviceId);
                            regId = simpleMybatisDao.selectOne("push.vivo.queryOneRegIdByDevice", params, String.class);
                        }

                        Map<String, String> clientCustomMap = (Map<String, String>) rParams.get("client_custom_map");
                        Map<String, String> extra = (Map<String, String>) rParams.get("extra");

                        JSONObject params = new JSONObject();
                        params.put("regId", regId);
                        params.put("alias", alias);
                        params.put("notifyType", rParams.getString("notify_type"));
                        params.put("title", rParams.getString("title"));
                        System.out.println("timetoLive" + rParams.getInteger("timeto_live"));
                        params.put("timeToLive", rParams.getInteger("time_to_live"));
                        params.put("networkType", rParams.getInteger("network_type"));
                        params.put("content", rParams.getString("content"));
                        params.put("skipType", rParams.getString("skip_type"));
                        params.put("skipContent", rParams.getString("skip_content"));
                        params.put("clientCustomMap", clientCustomMap);
                        params.put("extra", extra);
                        params.put("app_id", appId);
                        params.put("app_key", appKey);
                        params.put("app_secret", appSecret);
                        getLogger().info("vivo推送，参数：{} ", JSONObject.toJSONString(params));
                        result = vivoPushService.send(params);
                        getLogger().info("vivo推送，结果：{} ", result.toJSONString());
                    } else {
                        result.put("status", -1);
                        result.put("message", "vivo config in redis does not exist");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                getLogger().error("vivo推送，失败：{}", e.getMessage());
                result.put("status", -1);
                result.put("message", e.getMessage());
            }

        }
        return result.toString();
    }

    /**
     * 发送消息(群推)
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/send/group")
    @ResponseBody
    private String sendGroup(HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) throws Exception {
        JSONObject result = new JSONObject();
        String[] argSymbols = {"notify_type", "title", "content", "skip_type", "source"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if (verifyResult.getIntValue("status") != 0) {
            result = verifyResult;
        } else {

            //jsonSchema验证
//            JsonSchemaUtil.validateJson(rParams.toJSONString(), SchenaConfigUtil.SCHENA_VIVO_GROUP_SEND);

            List<String> deviceIds = (List<String>)rParams.get("devices");
            List<String> aliasList = (List<String>)rParams.get("alias");
            if((deviceIds != null && !deviceIds.isEmpty()) || (aliasList != null && !aliasList.isEmpty()) ){
                List<String> regIdList = new ArrayList<String>();
                Set<String> alias = null;
                VivoPushService vivoPushService = SpringUtil.getBean("vivoPushService", VivoPushService.class);
                try {

                    result = RedisUtil.getInstance().getConfigFromRedis(rParams.getString("source"), Constants.REDIS_VIVO_CONFIG);
                    if(result.getIntValue("status") == 0) {

                        getLogger().info(new StringBuffer("获取vivo配置config [Redis][key]{").append(Constants.REDIS_VIVO_CONFIG)
                                .append("}[config]{").append(result).append("}").toString());
                        String huaweiStr = result.getString("data");
                        if (!StringUtil.isBlank(huaweiStr)) {
                            JSONObject huaweiConfig = JSONObject.parseObject(huaweiStr);

                            String appId = huaweiConfig.getString("app_id");
                            String appKey = huaweiConfig.getString("app_key");
                            String appSecret = huaweiConfig.getString("app_secret");
                            //regIds,alias需一个不为空，两个都为空取regIds，个数限制2-1000个
                            if (deviceIds != null && deviceIds.size() >= 2 && deviceIds.size() <= 1000) {
                                SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
                                Map<String, Object> params = new HashMap<String, Object>();
                                params.put("devices", deviceIds);
                                regIdList = simpleMybatisDao.selectList("push.vivo.queryIdListByDevices", params, String.class);
                                System.out.println("regIdList.size()>>" + regIdList.size());

                                if (regIdList.size() < 2 || regIdList.size() > 1000) {
                                    result.put("status", -1);
                                    result.put("message", "设备对应的regId个数需在2到1000个之间");
                                    return result.toJSONString();
                                }
                            } else if (aliasList != null && aliasList.size() >= 2 && aliasList.size() <= 1000) {
                                alias = new HashSet<>(aliasList);
                            } else {
                                result.put("status", -1);
                                result.put("message", "aliases和regIds不能都为空，且个数在2到1000个之间");
                                return result.toJSONString();
                            }

                            Set<String> regIds = new HashSet<>(regIdList);

                            Map<String, String> clientCustomMap = (Map<String, String>) rParams.get("client_custom_map");
                            Map<String, String> extra = (Map<String, String>) rParams.get("extra");

                            JSONObject params = new JSONObject();
                            params.put("regIds", regIds);
                            params.put("alias", alias);
                            params.put("notifyType", rParams.getString("notify_type"));
                            params.put("timeToLive", rParams.getInteger("time_to_live"));
                            params.put("title", rParams.getString("title"));
                            params.put("content", rParams.getString("content"));
                            params.put("skipType", rParams.getString("skip_type"));
                            params.put("skipContent", rParams.getString("skip_content"));
                            params.put("networkType", rParams.getInteger("network_type"));
                            params.put("clientCustomMap", clientCustomMap);
                            params.put("extra", extra);
                            params.put("app_id", appId);
                            params.put("app_key", appKey);
                            params.put("app_secret", appSecret);
                            getLogger().info("vivo推送（群推），参数：{} ", JSONObject.toJSONString(params));
                            result = vivoPushService.sendGroup(params);
                            getLogger().info("vivo推送（群推），结果：{} ", result.toJSONString());
                        } else {
                            result.put("status", -1);
                            result.put("message", "vivo config in redis does not exist");
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    getLogger().error("vivo推送（群推），失败：{}", e.getMessage());
                    result.put("status", -1);
                    result.put("message", e.getMessage());
                }
            }else{
                result.put("status", -1);
                result.put("message", "regId and alias are miss!");
            }

        }
        return result.toString();
    }

    /**
     * 全量发送接口（全部）
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/send/all")
    @ResponseBody
    private String sendAll(HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) throws Exception {
        JSONObject result = new JSONObject();
        String[] argSymbols = {"notify_type", "title", "content", "skip_type", "source"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if (verifyResult.getIntValue("status") != 0) {
            result = verifyResult;
        } else {
            //jsonSchema验证
//            JsonSchemaUtil.validateJson(rParams.toJSONString(), SchenaConfigUtil.SCHENA_VIVO_ALL_SEND);

            VivoPushService vivoPushService = SpringUtil.getBean("vivoPushService", VivoPushService.class);
            try {
                result = RedisUtil.getInstance().getConfigFromRedis(rParams.getString("source"), Constants.REDIS_VIVO_CONFIG);
                if(result.getIntValue("status") == 0) {

                    getLogger().info(new StringBuffer("获取vivo配置config [Redis][key]{").append(Constants.REDIS_VIVO_CONFIG)
                            .append("}[config]{").append(result).append("}").toString());
                    String huaweiStr = result.getString("data");
                    if (!StringUtil.isBlank(huaweiStr)) {
                        JSONObject huaweiConfig = JSONObject.parseObject(huaweiStr);

                        String appId = huaweiConfig.getString("app_id");
                        String appKey = huaweiConfig.getString("app_key");
                        String appSecret = huaweiConfig.getString("app_secret");

                        Map<String, String> clientCustomMap = (Map<String, String>)rParams.get("client_custom_map");
                        Map<String, String> extra = (Map<String, String>)rParams.get("extra");

                        JSONObject params = new JSONObject();
                        params.put("notifyType", rParams.getString("notify_type"));
                        params.put("title", rParams.getString("title"));
                        params.put("content", rParams.getString("content"));
                        params.put("timeToLive", rParams.getInteger("time_to_live"));
                        params.put("skipType", rParams.getString("skip_type"));
                        params.put("skipContent", rParams.getString("skip_content"));
                        params.put("networkType", rParams.getInteger("network_type"));
                        params.put("clientCustomMap", clientCustomMap);
                        params.put("app_id", appId);
                        params.put("app_key", appKey);
                        params.put("app_secret", appSecret);
                        getLogger().info("vivo推送（全量推送），参数：{} ", JSONObject.toJSONString(params));
                        result = vivoPushService.sendAll(params);
                        getLogger().info("vivo推送（全量推送），结果：{} ", result.toJSONString());
                    } else {
                        result.put("status", -1);
                        result.put("message", "vivo config in redis does not exist");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                getLogger().error("vivo推送（全量推送），失败：{}", e.getMessage());
                result.put("status", -1);
                result.put("message", e.getMessage());
            }

        }
        return result.toString();
    }


    /**
     * 获取消息推送统计值
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/statistics")
    @ResponseBody
    private String getStatistics(HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) throws Exception {
        JSONObject result = new JSONObject();
        String[] argSymbols = {"task_ids"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if (verifyResult.getIntValue("status") != 0) {
            result = verifyResult;
        } else {

            try {
                result = RedisUtil.getInstance().getConfigFromRedis(rParams.getString("source"), Constants.REDIS_VIVO_CONFIG);
                if(result.getIntValue("status") == 0) {

                    getLogger().info(new StringBuffer("获取vivo配置config [Redis][key]{").append(Constants.REDIS_VIVO_CONFIG)
                            .append("}[config]{").append(result).append("}").toString());
                    String huaweiStr = result.getString("data");
                    if (!StringUtil.isBlank(huaweiStr)) {
                        JSONObject huaweiConfig = JSONObject.parseObject(huaweiStr);

                        String appId = huaweiConfig.getString("app_id");
                        String appKey = huaweiConfig.getString("app_key");
                        String appSecret = huaweiConfig.getString("app_secret");
                        String taskIds = rParams.getString("task_ids");
                        VivoPushService vivoPushService = SpringUtil.getBean("vivoPushService", VivoPushService.class);
                        getLogger().info("vivo获取消息推送统计值，参数：{} ", taskIds);
                        result = vivoPushService.getStatistics(appId, appKey, appSecret, taskIds);
                        getLogger().info("vivo获取消息推送统计值，结果：{} ", result.toJSONString());
                    } else {
                        result.put("status", -1);
                        result.put("message", "vivo config in redis does not exist");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                getLogger().error("vivo获取消息推送统计值，失败：{}", e.getMessage());
                result.put("status", -1);
                result.put("message", e.getMessage());
            }

        }
        return result.toString();
    }

    /**
     * 绑定设备regId
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/binding")
    @ResponseBody
    private String bindingRegId (HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) throws Exception {
        JSONObject result = new JSONObject();
        String[] argSymbols = {"device_id", "regist_id"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if (verifyResult.getIntValue("status") != 0) {
            result = verifyResult;
        } else {
            //jsonSchema验证
//            JsonSchemaUtil.validateJson(rParams.toJSONString(), SchenaConfigUtil.SCHENA_VIVO_BINDING);
            try {
                String deviceId = rParams.getString("device_id");
                Map<String, String> qParams = new HashMap<String, String>();
                qParams.put("device_id", deviceId);
                SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
                Map<String, String> bindRecord = simpleMybatisDao.selectOne("push.vivo.queryBindRecord", qParams, Map.class);
                VivoPushService vivoPushService = SpringUtil.getBean("vivoPushService", VivoPushService.class);

                if(bindRecord != null ){
                    Map<String, String> params = new HashMap<String, String>();
                    params.put("bind_record_id", bindRecord.get("bind_record_id"));
                    params.put("device_id", rParams.getString("device_id"));
                    params.put("regist_id", rParams.getString("regist_id"));
                    getLogger().info("设备修改绑定regId，参数：{} ", params.toString());
                    result = vivoPushService.updateBindRecord(params);
                    getLogger().info("设备修改绑定regId，结果：{} ", result.toJSONString());
                } else {
                    Map<String, String> params = new HashMap<String, String>();
                    params.put("device_id", rParams.getString("device_id"));
                    params.put("regist_id", rParams.getString("regist_id"));
                    getLogger().info("设备绑定regId，参数：{} ", params.toString());
                    result = vivoPushService.bindRecord(params);
                    getLogger().info("设备绑定regId，结果：{} ", result.toJSONString());
                }
            } catch (Exception e) {
                e.printStackTrace();
                getLogger().error("设备绑定regId，失败：{}", e.getMessage());
                result.put("status", -1);
                result.put("message", e.getMessage());
            }

        }
        return result.toString();
    }

    /**
     * 解除绑定设备
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/unbind")
    @ResponseBody
    private String unbindDevice (HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) throws Exception {
        JSONObject result = new JSONObject();
        String[] argSymbols = {"device_id"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if (verifyResult.getIntValue("status") != 0) {
            result = verifyResult;
        } else {
            //jsonSchema验证
//            JsonSchemaUtil.validateJson(rParams.toJSONString(), SchenaConfigUtil.SCHENA_VIVO_UNBIND);
            try {
                String deviceId = rParams.getString("device_id");
                Map<String, String> qParams = new HashMap<String, String>();
                qParams.put("device_id", deviceId);
                SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
                Map<String, String> bindRecord = simpleMybatisDao.selectOne("push.vivo.queryBindRecord", qParams, Map.class);

                if(bindRecord != null ){
                    VivoPushService vivoPushService = SpringUtil.getBean("vivoPushService", VivoPushService.class);

                    qParams.put("bind_record_id", bindRecord.get("bind_record_id"));
                    getLogger().info("设备解除绑定regId，参数：{} ", qParams.toString());
                    result = vivoPushService.unbind(qParams);
                    getLogger().info("设备解除绑定regId，结果：{} ", result.toJSONString());
                } else {
                    result.put("status", -1);
                    result.put("message", "设备未绑定regId");
                }
            } catch (Exception e) {
                e.printStackTrace();
                getLogger().error("设备绑定regId，失败：{}", e.getMessage());
                result.put("status", -1);
                result.put("message", e.getMessage());
            }

        }
        return result.toString();
    }



    /**
     * 消息送达回执
     * @param request
     * @param response
     * @return
     */
    @PostMapping("/notify")
    @ResponseBody
    private String vivoPushNotify(HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) {
        JSONObject result = new JSONObject();
        getLogger().info("vivo回执RequestBody：{} ", JSONObject.toJSONString(rParams));
        try {

            JSONObject object = JSONObject.parseObject(JSONObject.toJSONString(rParams));
//            System.out.println(object.toJSONString());
            Map<String, String> params = null;
            List<Map<String,String>>  paramsList = new ArrayList<>();
            Iterator<String> sIterator = object.keySet().iterator();
            // 获得key
            String key = "";
            while (sIterator.hasNext()) {
                // 获得key
                key = sIterator.next();
                JSONObject values = JSONObject.parseObject(JSONObject.toJSONString(object.get(key)));
                params = new HashMap();
                params.put("task_id", key);
                params.put("is_reach", "1");
                params.put("param", values.getString("param"));
                params.put("targets", values.getString("targets"));
                paramsList.add(params);
            }

//            System.out.println(params.toString());
            VivoPushService vivoPushService = SpringUtil.getBean("vivoPushService", VivoPushService.class);
            getLogger().info("vivo回执，参数：{} ", JSONObject.toJSONString(rParams));
            result = vivoPushService.notify(paramsList);
            getLogger().info("vivo回执，结果：{} ", result.toJSONString());
        } catch (Exception e) {
            e.printStackTrace();
            getLogger().error("vivo回执，失败：{}", e.getMessage());
            result.put("status", -1);
            result.put("message", e.getMessage());
        }
        return result.toString();
    }

    /**
     * 获取vivo推送记录
     * @param request
     * @param response
     * @param rParams
     * @return
     */
    @PostMapping("/query/record")
    @ResponseBody
    public String getPushMailRecord(HttpServletRequest request, HttpServletResponse response, @RequestBody JSONObject rParams) throws Exception {
        JSONObject result = new JSONObject();
        String[] argSymbols = {"source", "limit", "pos"};
        JSONObject verifyResult = CommonUtil.getInstance().verifyArgsEmpty(rParams, argSymbols);
        if(verifyResult.getIntValue("status") != 0){
            result = verifyResult;
        } else {
            //jsonSchema验证
//            JsonSchemaUtil.validateJson(rParams.toJSONString(), SchenaConfigUtil.SCHENA_VIVO_QUERY_RECORD);
            try {

                String limit = rParams.getString("limit");
                JSONObject qParams = new JSONObject();

                if(!"-1".equals(limit)) {
                    qParams.put("pos", rParams.getInteger("pos"));
                    qParams.put("limit", Integer.valueOf(limit));
                }
                qParams.put("source", rParams.getString("source"));
                qParams.put("regist_id", rParams.getString("regist_id"));
                qParams.put("alias", rParams.getString("alias"));
                qParams.put("platform", rParams.getString("platform"));
                qParams.put("title", rParams.getString("title"));
                qParams.put("content", rParams.getString("content"));
                qParams.put("status", rParams.getString("status"));
                qParams.put("is_reach", rParams.getString("is_reach"));
                qParams.put("remark", rParams.getString("remark"));

                SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
                JSONObject cParams = new JSONObject();
                cParams.put("source", rParams.getString("source"));
                Map<String, String> vivoConfig = simpleMybatisDao.selectOne("push.vivo.queryPushVivoConfig", cParams, Map.class);
                if(vivoConfig != null) {

                    qParams.put("app_id", vivoConfig.get("app_id"));
                    getLogger().info(new StringBuffer("vivo推送流水查询，参数：").append(JSONObject.toJSONString(qParams)).toString());
                    Integer dataCount = simpleMybatisDao.selectOne("push.vivo.queryPushVivoRecordCount", qParams, Integer.class);
                    List<Map> smsRecordList = simpleMybatisDao.selectList("push.vivo.queryPushVivoRecord", qParams, Map.class);
                    if (smsRecordList == null) {
                        result.put("status", -1);
                        result.put("message", "暂无vivo推送发送记录！");
                    } else {
                        result.put("status", 0);
                        result.put("message", "ok");
                        result.put("data", smsRecordList);
                        result.put("total", dataCount);
                        result.put("count", smsRecordList.size());
                    }
                } else {
                    result.put("status", -1);
                    result.put("message", "获取vivo配置信息错误！");
                }
            } catch (Exception e) {
                e.printStackTrace();
                getLogger().error("获取vivo推送记录失败：{}", e.getMessage());
            }
        }
        getLogger().info(new StringBuffer("vivo推送流水查询，结果：").append(result.toJSONString()).toString());
        return result.toString();
    }


    /**
     * 更新vivo redis缓存
     * @param request
     * @param response
     * @return
     */
    @PostMapping("/update/vivo_config")
    @ResponseBody
    public String updateRedisMailConfig(HttpServletRequest request, HttpServletResponse response){
        JSONObject result = new JSONObject();

        try {
//            String source = rParams.getString("source");
            JSONObject params = new JSONObject();
            params.put("enabled", "1");
            SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
            List<Map> mailConfigList = simpleMybatisDao.selectList("push.vivo.queryPushVivoConfig", params, Map.class);
            if(mailConfigList != null){
                result = RedisUtil.getInstance().updateVivoConfigToRedis(Constants.REDIS_VIVO_CONFIG, mailConfigList);
            }else {
                result.put("status", -1);
                result.put("message", "vivo configs is null");
            }

        } catch (Exception e) {
            e.printStackTrace();
            getLogger().error("vivo redis更新，失败：{}", e.getMessage());
            result.put("status", -1);
            result.put("message", e.getMessage());
        }
        return result.toString();
    }



//    public static void main (String[] args){
//        JSONObject json = new JSONObject();
//        String[] regIds = new String[]{"1","2"};
//
//        for(int i = 0; i<regIds.length; i++ ){
//            System.out.println(regIds[i]);
//        }
//        json.put("regids", regIds);
//
//        System.out.println(json.toJSONString());
//        System.out.println(json.getJSONArray("regids").toString());
//        JSONArray array =  json.getJSONArray("regids");
//        for(int i=0; i<array.size(); i++) {
//            System.out.println(array.get(i));
//        }
//
//    }
}
