package cn.gnw.push.iosmdm.provider.service;

import cn.gnw.push.api.entity.iosmdm.*;
import cn.gnw.push.api.utils.ApnsTools;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.net.SocketFactory;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/**
 * APNS服务器
 *
 * @author: xiaowb
 * @mail xiaowb@txtws.com
 * @date: 2018-09-30 15:33
 */
public class ApnsService {

    private static Log logger = LogFactory.getLog(ApnsService.class);

    private ExecutorService service = null;
    private ApnsConnectionPool connPool = null;
    private ApnsFeedbackConnection feedbackConn = null;
    private ApnsService(ApnsConfig config) {
        int poolSize = config.getPoolSize();
        service = Executors.newFixedThreadPool(poolSize);

        SocketFactory factory = ApnsTools.createSocketFactory(config.getKeyStore(), config.getPassword(),
                ApnsConstants.KEYSTORE_TYPE, ApnsConstants.ALGORITHM, ApnsConstants.PROTOCOL);
        connPool = ApnsConnectionPool.newConnPool(config, factory);
        feedbackConn = new ApnsFeedbackConnection(config, factory);
    }

    public void sendNotification(final String token, final Payload payload) {
        service.execute(new Runnable() {
            @Override
            public void run() {
                ApnsConnection conn = null;
                try {
                    conn = getConnection();
                    conn.sendNotification(token, payload);
                } catch (Exception e) {
                    logger.error(e.getMessage(), e);
                } finally {
                    if (conn != null) {
                        connPool.returnConn(conn);
                    }
                }
            }
        });
    }

    public void sendNotification(final PushNotification notification) {
        service.execute(new Runnable() {
            @Override
            public void run() {
                ApnsConnection conn = null;
                try {
                    conn = getConnection();
                    conn.sendNotification(notification);
                } catch (Exception e) {
                    logger.error(e.getMessage(), e);
                } finally {
                    if (conn != null) {
                        connPool.returnConn(conn);
                    }
                }
            }
        });
    }

    private ApnsConnection getConnection() {
        ApnsConnection conn = connPool.borrowConn();
        if (conn == null) {
            throw new RuntimeException("Can't get apns connection");
        }
        return conn;
    }

    private static void checkConfig(ApnsConfig config) {
        if (config == null || config.getKeyStore() == null || config.getPassword() == null ||
                "".equals(config.getPassword().trim())) {
            throw new IllegalArgumentException("KeyStore and password can't be null");
        }
        if (config.getPoolSize() <= 0 || config.getRetries() <= 0 || config.getCacheLength() <= 0) {
            throw new IllegalArgumentException("poolSize,retry, cacheLength must be positive");
        }
    }
    private static Map<String, ApnsService> serviceCacheMap = new HashMap<String, ApnsService>(3);

    public static ApnsService getCachedService(String name) {
        return serviceCacheMap.get(name);
    }
    public static ApnsService createInstance(ApnsConfig config) {
        checkConfig(config);
        String name = config.getName();
        ApnsService service = getCachedService(name);
        if (service == null) {
            synchronized (name.intern()) {
                service = getCachedService(name);
                if (service == null) {
                    service = new ApnsService(config);
                    serviceCacheMap.put(name, service);
                }
            }
        }
        return service;
    }

    public void shutdown() {
        service.shutdown();
        try {
            service.awaitTermination(10, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            logger.warn("Shutdown ApnsService interrupted", e);
        }
        connPool.close();
    }

    public List<Feedback> getFeedbacks() {
        return feedbackConn.getFeedbacks();
    }
}
