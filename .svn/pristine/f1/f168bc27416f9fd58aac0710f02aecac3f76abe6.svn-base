package cn.gnw.push.provider.config;

import cn.gnw.pub.base.impl.BaseBS;
import cn.gnw.push.api.entity.Constants;
import cn.gnw.push.provider.mq.*;
import org.springframework.amqp.core.*;
import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.*;
import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * RabbitMQ 配置类
 * @author: chengzd
 * @mail chengzd@txtws.com
 * @date: 2018-09-18 09:17
 */
@Configuration
@ConfigurationProperties(prefix = "spring.rabbitmq")
public class RabbitMQConfig extends BaseBS {

    private String host;
    private int port;
    private String username;
    private String password;
    private String virtualHost;

    @Bean
    public ConnectionFactory connectionFactory() {
        CachingConnectionFactory connectionFactory = new CachingConnectionFactory(host, port);
        connectionFactory.setUsername(username);
        connectionFactory.setPassword(password);
        connectionFactory.setVirtualHost(virtualHost);
        connectionFactory.setPublisherConfirms(true);
        getLogger().info("username == " + username);
        return connectionFactory;
    }

    @Bean
    public RabbitTemplate rabbitTemplate() {
        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory());
        rabbitTemplate.setMessageConverter(new Jackson2JsonMessageConverter());
        rabbitTemplate.setExchange(Constants.RMQ_GNW_PUSH_EXCHANGE);
        return rabbitTemplate;
    }

    @Bean
    DirectExchange directExchange() {
        return new DirectExchange(Constants.RMQ_GNW_PUSH_EXCHANGE, true, false);
    }

    // 待发送短信队列
    @Bean(name="toPushSmsQueue")
    public Queue toPushSmsQueue() {
        return new Queue(Constants.RMQ_GNW_PUSH_SMS_QUEUE, true, false, false);
    }

    // 待发送短信队列(阿里云)
    @Bean(name="toPushAliyunSmsQueue")
    public Queue toPushAliyunSmsQueue() {
        return new Queue(Constants.RMQ_GNW_PUSH_ALIYUN_SMS_QUEUE, true, false, false);
    }

    // 待发送短信异常队列(阿里云)
    @Bean(name="toPushAliyunSmsErrorQueue")
    public Queue toPushAliyunSmsErrorQueue() {
        return new Queue(Constants.RMQ_GNW_PUSH_ALIYUN_SMS_QUEUE_ERROR, true, false, false);
    }

    // 待发送邮件队列
    @Bean(name="toPushMailQueue")
    public Queue toPushMailQueue() {
        return new Queue(Constants.RMQ_GNW_PUSH_MAIL_QUEUE, true, false, false);
    }

    // 待推送极光队列
    @Bean(name="toPushJgQueue")
    public Queue toPushJgQueue() {
        return new Queue(Constants.RMQ_GNW_PUSH_JIGUANG_QUEUE, true, false, false);
    }

    // 待推送vivo队列
    @Bean(name="toPushVivoQueue")
    public Queue toPushVivoQueue() {
        return new Queue(Constants.RMQ_GNW_PUSH_VIVO_SEND_QUEUE, true, false, false);
    }

    // 待推送vivo批量推送用户队列
    @Bean(name="toPushVivoSendGroupQueue")
    public Queue toPushVivoSendGroupQueue() {
        return new Queue(Constants.RMQ_GNW_PUSH_VIVO_SEND_GROUP_QUEUE, true, false, false);
    }

    // 待推送华为队列
    @Bean(name="toPushHuaweiQueue")
    public Queue toPushHuaweiQueue() {
        return new Queue(Constants.RMQ_GNW_PUSH_HUAWEI_SEND_QUEUE, true, false, false);
    }

    // 待推送小米队列
    @Bean(name="toPushMiQueue")
    public Queue toPushMiQueue() {
        return new Queue(Constants.RMQ_GNW_PUSH_MI_SEND_QUEUE, true, false, false);
    }

    @Bean
    Binding bindingExchange(@Qualifier("toPushSmsQueue") Queue toPushSmsQueue, DirectExchange directExchange) {
        return BindingBuilder.bind(toPushSmsQueue).to(directExchange).with(Constants.RMQ_GNW_PUSH_SMS_QUEUE);
    }

    @Bean
    Binding bindingExchange1(@Qualifier("toPushAliyunSmsQueue") Queue toPushAliyunSmsQueue, DirectExchange directExchange) {
        return BindingBuilder.bind(toPushAliyunSmsQueue).to(directExchange).with(Constants.RMQ_GNW_PUSH_ALIYUN_SMS_QUEUE);
    }

    @Bean
    Binding bindingExchangeError1(@Qualifier("toPushAliyunSmsErrorQueue") Queue toPushAliyunSmsErrorQueue, DirectExchange directExchange) {
        return BindingBuilder.bind(toPushAliyunSmsErrorQueue).to(directExchange).with(Constants.RMQ_GNW_PUSH_ALIYUN_SMS_QUEUE_ERROR);
    }

    @Bean
    Binding bindingExchange2(@Qualifier("toPushMailQueue") Queue toPushMailQueue, DirectExchange directExchange) {
        return BindingBuilder.bind(toPushMailQueue).to(directExchange).with(Constants.RMQ_GNW_PUSH_MAIL_QUEUE);
    }

    @Bean
    Binding bindingExchange3(@Qualifier("toPushJgQueue") Queue toPushJgQueue, DirectExchange directExchange) {
        return BindingBuilder.bind(toPushJgQueue).to(directExchange).with(Constants.RMQ_GNW_PUSH_JIGUANG_QUEUE);
    }

    @Bean
    Binding bindingExchange4(@Qualifier("toPushVivoQueue") Queue toPushVivoQueue, DirectExchange directExchange) {
        return BindingBuilder.bind(toPushVivoQueue).to(directExchange).with(Constants.RMQ_GNW_PUSH_VIVO_SEND_QUEUE);
    }

    @Bean
    Binding bindingExchange5(@Qualifier("toPushVivoSendGroupQueue") Queue toPushVivoSendGroupQueue, DirectExchange directExchange) {
        return BindingBuilder.bind(toPushVivoSendGroupQueue).to(directExchange).with(Constants.RMQ_GNW_PUSH_VIVO_SEND_GROUP_QUEUE);
    }

    @Bean
    Binding bindingExchange6(@Qualifier("toPushHuaweiQueue") Queue toPushHuaweiQueue, DirectExchange directExchange) {
        return BindingBuilder.bind(toPushHuaweiQueue).to(directExchange).with(Constants.RMQ_GNW_PUSH_HUAWEI_SEND_QUEUE);
    }

    @Bean
    Binding bindingExchange7(@Qualifier("toPushMiQueue") Queue toPushMiQueue, DirectExchange directExchange) {
        return BindingBuilder.bind(toPushMiQueue).to(directExchange).with(Constants.RMQ_GNW_PUSH_MI_SEND_QUEUE);
    }

    // 待发送短信队列监听器1
    @Bean
    public SimpleMessageListenerContainer messageContainer() {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory());
        container.setQueues(toPushSmsQueue());
        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        container.setMessageListener(new ToPushSmsListener(1));
        return container;
    }

    // 待发送短信队列监听器1（阿里云）
    @Bean
    public SimpleMessageListenerContainer messageContainer1() {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory());
        container.setQueues(toPushAliyunSmsQueue());
        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        container.setMessageListener(new ToPushAliyunSmsListener(1));
        return container;
    }

    // 待发送短信异常队列监听器1（阿里云）
    @Bean
    public SimpleMessageListenerContainer messageContainerError1() {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory());
        container.setQueues(toPushAliyunSmsErrorQueue());
        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        container.setMessageListener(new ToPushAliyunSmsErrorListener(1));
        return container;
    }

    // 待发送邮件队列监听器1
    @Bean
    public SimpleMessageListenerContainer messageContainer2() {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory());
        container.setQueues(toPushMailQueue());
        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        container.setMessageListener(new ToPushMailListener(2));
        return container;
    }


    // 待推送极光队列监听器1
    @Bean
    public SimpleMessageListenerContainer messageContainer3() {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory());
        container.setQueues(toPushJgQueue());
        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        container.setMessageListener(new ToPushJgListener(3));
        return container;
    }

    // 待推送vivo队列监听器1
    @Bean
    public SimpleMessageListenerContainer messageContainer4() {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory());
        container.setQueues(toPushVivoQueue());
        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        container.setMessageListener(new ToPushVivoListener(4));
        return container;
    }

    // 待推送vivo批量推送用户队列监听器1
    @Bean
    public SimpleMessageListenerContainer messageContainer5() {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory());
        container.setQueues(toPushVivoSendGroupQueue());
        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        container.setMessageListener(new ToPushVivoGroupListener(5));
        return container;
    }

    // 待推送华为队列监听器1
    @Bean
    public SimpleMessageListenerContainer messageContainer6() {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory());
        container.setQueues(toPushHuaweiQueue());
        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        container.setMessageListener(new ToPushHuaweiListener(6));
        return container;
    }

    // 待推送小米队列监听器1
    @Bean
    public SimpleMessageListenerContainer messageContainer7() {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory());
        container.setQueues(toPushMiQueue());
        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        container.setMessageListener(new ToPushMiListener(7));
        return container;
    }


    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getVirtualHost() {
        return virtualHost;
    }

    public void setVirtualHost(String virtualHost) {
        this.virtualHost = virtualHost;
    }
}
