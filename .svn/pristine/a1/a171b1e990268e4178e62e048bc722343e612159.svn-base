package cn.gnw.push.iosmdm.provider.controller;

import cn.gnw.pub.base.db.SimpleMybatisDao;
import cn.gnw.pub.base.utils.SpringUtil;
import cn.gnw.pub.base.utils.StringUtil;
import cn.gnw.push.api.entity.Constants;
import cn.gnw.push.api.entity.iosmdm.DeviceTemp;
import cn.gnw.push.api.entity.iosmdm.IosMdmBindRecord;
import cn.gnw.push.api.entity.iosmdm.Record;
import cn.gnw.push.api.utils.IosMdmUtils;
import cn.gnw.push.iosmdm.provider.interfaces.PushDeviceCenterServiceClient;
import cn.gnw.push.iosmdm.provider.util.MDMTaskUtils;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import redis.clients.jedis.ShardedJedis;
import redis.clients.jedis.ShardedJedisPool;
import sun.misc.BASE64Encoder;

import java.util.*;

/**
 * MDM认证和指令回调操作
 *
 * @author: xiaowb
 * @mail xiaowb@txtws.com
 * @date: 2018-10-08 17:23
 */
@RestController
@RequestMapping("/mdm")
public class MdmController {

    private Log logger = LogFactory.getLog(MdmController.class);

    private PushDeviceCenterServiceClient pushDeviceCenterServiceClient = SpringUtil.getBean(PushDeviceCenterServiceClient.class);

    /**
     * 设备认证和注册功能
     *
     * @param rParams
     * @return
     */
    @PutMapping("/checkin")
    public String checkin(@RequestBody JSONObject rParams){
        JSONObject result = new JSONObject();
        String deviceId = rParams.getString("device_id");
        String source = rParams.getString("source");
        String info = rParams.getString("info");
        result.put("info",info.toString());
        SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
        /**Device认证方法调用、Device回传Token方法调用**/
        if (info.contains(IosMdmUtils.Authenticate)) {
            logger.info("-------------------Authenticate start---------------");
            logger.info("Device->Server Authenticate:\n" + info.toString());
            /**保存返回的Token、PushMagic数据**/
            Map<String, String> plistMap = IosMdmUtils.parseAuthenticate(info.toString());
            String topic = plistMap.get(IosMdmUtils.Topic);
            String udid = plistMap.get(IosMdmUtils.UDID);
            String SerialNumber = plistMap.get(IosMdmUtils.SERIALNUBER);
            Map<String,String> bindRecordParam = new HashMap<String,String>();
            bindRecordParam.put("udid",udid);
            IosMdmBindRecord bindRecord = simpleMybatisDao.selectOne("mdm.findBindRecord", bindRecordParam, IosMdmBindRecord.class);
            /**查询初始数据**/
            Map<String,String> deviceTempParam = new HashMap<String, String>();
            deviceTempParam.put("deviceId",deviceId);
            DeviceTemp deviceTemp = simpleMybatisDao.selectOne("mdm.findDeviceTempBean", deviceTempParam, DeviceTemp.class);
            Map<String, String> params = new HashMap<String, String>();
            if(null != deviceTemp){
                params.put("deviceFlag",deviceTemp.getDeviceFlag());
                /**异步通知第三方更新**/
                MDMTaskUtils.sendCallBack(deviceTemp.getCallBack(), deviceId, "1");
            }
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("device_sn",SerialNumber);
            jsonObject.put("source",source);
            String deviceIdFromDcStr = pushDeviceCenterServiceClient.getDeviceIdFromDc(jsonObject);
            JSONObject deviceIdFromDcJsonObject = JSONObject.parseObject(deviceIdFromDcStr);
            int status1 = deviceIdFromDcJsonObject.getIntValue("status");
            if(status1 == -1){
                logger.error("生成设备中心的device_id:" + deviceIdFromDcJsonObject.getString("message"));
                result.put("status",-1);
                result.put("message","生成设备id异常");
            }else{
                JSONObject data = deviceIdFromDcJsonObject.getJSONObject("data");
                String deviceIdFromDc = data.getString("device_id");
                params.put("deviceId",deviceId);
                params.put("udid",udid);
                params.put("topic",topic);
                params.put("control","1");
                params.put("deviceIdFromDc",deviceIdFromDc);
                ShardedJedisPool shardedJedisPool = SpringUtil.getBean("shardedJedisPool", ShardedJedisPool.class);
                ShardedJedis shardedJedis = shardedJedisPool.getResource();
                shardedJedis.set(deviceIdFromDc,deviceId);
                if (bindRecord != null) {
                    params.put("bindRecordId",bindRecord.getBindRecordId());
                    simpleMybatisDao.update("mdm.updateBindRecord",params);
                }else{
                    params.put("bindRecordId", StringUtil.getUUIDString());
                    simpleMybatisDao.insert("mdm.addBindRecord",params);
                }
                JSONObject deviceCenterUpdateParams = new JSONObject();
                deviceCenterUpdateParams.put("device_id",deviceIdFromDc);
                deviceCenterUpdateParams.put("device_type","02");
                deviceCenterUpdateParams.put("device_sn",SerialNumber);
                deviceCenterUpdateParams.put("source",source);
                String deviceCenterUpdateStr = pushDeviceCenterServiceClient.pushDeviceCenterUpdate(deviceCenterUpdateParams);
                JSONObject deviceCenterUpdateJsonObject = JSONObject.parseObject(deviceCenterUpdateStr);
                int status2 = deviceCenterUpdateJsonObject.getIntValue("status");
                if(status2 == -1){
                    logger.error("注册设备信息异常:" + deviceCenterUpdateJsonObject.getString("message"));
                    result.put("status",-1);
                    result.put("message","注册设备信息异常");
                }
                JSONObject deviceCenterBindParams = new JSONObject();
                deviceCenterBindParams.put("device_id",deviceIdFromDc);
                deviceCenterBindParams.put("pa_type","000");
                pushDeviceCenterServiceClient.pushDeviceCenterBind(deviceCenterBindParams);
                result.put("configTitle","MDMApp_EraseDevice");
                result.put("status",0);
                result.put("message","证书注册成功");
            }
        } else if (info.contains(IosMdmUtils.TokenUpdate)) {
            logger.info("-------------------TokenUpdate start---------------");
            logger.info("Device->Server TokenUpdate:\n" + info.toString());
            /**保存返回的数据**/
            Map<String, String> plistMap = IosMdmUtils.parseTokenUpdate(info.toString());
            String unlockToken = IosMdmUtils.parseUnlockToken(info.toString());
            String udid = plistMap.get(IosMdmUtils.UDID);
            String topic = plistMap.get(IosMdmUtils.Topic);
            String oriToken = plistMap.get(IosMdmUtils.Token);
            String pushMagic = plistMap.get(IosMdmUtils.PushMagic);
            Map<String,String> bindRecordParam = new HashMap<String, String>();
            bindRecordParam.put("udid",udid);
            IosMdmBindRecord bindRecord = simpleMybatisDao.selectOne("mdm.findBindRecord", bindRecordParam, IosMdmBindRecord.class);
            Map<String, String> params = new HashMap<String, String>();
            params.put("deviceId",deviceId);
            params.put("udid",udid);
            params.put("topic",topic);
            params.put("control","2");
            params.put("unlockToken",unlockToken);
            /**组装新的Token数据**/
            try {
                String token = IosMdmUtils.parseToken(oriToken);
                params.put("token",token);
            }catch (Exception e){
                logger.error("封装数据异常：",e);
            }
            params.put("pushMagic",pushMagic);
            /**查询初始数据**/
            Map<String,String> deviceTempParam = new HashMap<String, String>();
            deviceTempParam.put("deviceId",deviceId);
            DeviceTemp deviceTemp = simpleMybatisDao.selectOne("mdm.findDeviceTempBean", deviceTempParam, DeviceTemp.class);
            if(null != deviceTemp){
                params.put("deviceFlag",deviceTemp.getDeviceFlag());
                /**异步通知第三方更新**/
                MDMTaskUtils.sendCallBack(deviceTemp.getCallBack(), deviceId, "2");
            }
            if (bindRecord != null) {
                params.put("bindRecordId",bindRecord.getBindRecordId());
                simpleMybatisDao.update("mdm.updateBindRecord",params);
            }else{
                params.put("bindRecordId", StringUtil.getUUIDString());
                simpleMybatisDao.insert("mdm.addBindRecord",params);
            }
            /**异步加设备信息**/
           //MDMTaskUtils.syncDeviceInfo(deviceId);
            result.put("status",0);
            result.put("message","证书更新成功");
        } else if (info.contains(IosMdmUtils.CheckOut)) {
            logger.info("Device->Server CheckOut:\n" + info.toString());
            logger.info("-------------------CheckOut start---------------");
            Map<String,String> bindRecordParam = new HashMap<String, String>();
            bindRecordParam.put("deviceId",deviceId);
            IosMdmBindRecord bindRecord = simpleMybatisDao.selectOne("mdm.findBindRecord", bindRecordParam, IosMdmBindRecord.class);
            Map<String,String> params = new HashMap<String, String>();
            if (bindRecord != null) {
                params.put("control","-1");
                /**查询初始数据**/
                Map<String,String> deviceTempParam = new HashMap<String, String>();
                deviceTempParam.put("deviceId",deviceId);
                DeviceTemp deviceTemp = simpleMybatisDao.selectOne("mdm.findDeviceTempBean", deviceTempParam, DeviceTemp.class);
                if(null != deviceTemp){
                    /**异步通知第三方更新**/
                    MDMTaskUtils.sendCallBack(deviceTemp.getCallBack(), deviceId, "-1");
                }
                params.put("bindRecordId",bindRecord.getBindRecordId());
                simpleMybatisDao.update("mdm.updateBindRecord",params);
            }
            result.put("status",0);
            result.put("message","证书移除成功");
            logger.info("Server->Device:\n Don't need to return");
            logger.info("-------------------CheckOut end---------------");
        }
        return result.toJSONString();
    }

    /**
     * 操作状态回执
     *
     * @param rParams
     * @return
     */
    @PutMapping("/server")
    public String serverUrl(@RequestBody JSONObject rParams){
        JSONObject result = new JSONObject();
        String deviceId = rParams.getString("device_id");
        String source = rParams.getString("source");
        String info = rParams.getString("info");
        logger.info("deviceId:" + deviceId);
        /**获取当期设备的编号**/
        SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
        Map<String,String> bindRecordParam = new HashMap<String,String>();
        bindRecordParam.put("deviceId", deviceId);
        IosMdmBindRecord bindRecord = simpleMybatisDao.selectOne("mdm.findBindRecord", bindRecordParam, IosMdmBindRecord.class);
        RabbitTemplate rabbitTemplate = SpringUtil.getBean("rabbitTemplate", RabbitTemplate.class);
        /**设备空闲状态,可以发送相关命令**/
        if(info.contains(IosMdmUtils.Idle)) {
            /**执行命令**/
            Map<String,String> recordParams = new HashMap<String,String>();
            recordParams.put("deviceId", deviceId);
            recordParams.put("doIt","0");
            List<Record> records = simpleMybatisDao.selectList("mdm.findRecordBean", recordParams, Record.class);
            if(!records.isEmpty()) {
                Record record = records.get(0);
                if(record != null) {
                    if(record.getCommand().equals(IosMdmUtils.Lock)) {
                        logger.info("-------------------DeviceLock Start---------------");
                        /**发送锁屏命令**/
                        String commandString = IosMdmUtils.getCommandPList(IosMdmUtils.Lock, record.getCommandId());
                        result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_DeviceLock");
                    } else if(record.getCommand().equals(IosMdmUtils.Erase)) {
                        logger.info("-------------------EraseDevice Start---------------");
                        /**发送清除谁命令**/
                        String commandString = IosMdmUtils.getCommandPList(IosMdmUtils.Erase, record.getCommandId());
                        logger.info("Server->Device Erase:\n" + commandString);
                        result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_EraseDevice");
                    } else if(record.getCommand().equals(IosMdmUtils.Info)) {
                        logger.info("-------------------DeviceInformation Start---------------");
                        /**发送获取设备信息命令**/
                        String commandString = IosMdmUtils.getCommandInfoPList(IosMdmUtils.Info, record.getCommandId());
                        logger.info("Server->Device DeviceInformation:\n" + commandString);
                        result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_DeviceInformation");
                    } else if(record.getCommand().equals(IosMdmUtils.Apps)) {
                        logger.info("-------------------InstalledApplicationList Start---------------");
                        /**发送获取设备信息命令**/
                        String commandString = "";
                        if(record.getCtype().equals("ManagedAppsOnly")) {
                            commandString = IosMdmUtils.getAppsCommandPList(IosMdmUtils.Apps, record.getCommandId());
                        }else{
                            commandString = IosMdmUtils.getCommandPList(IosMdmUtils.Apps, record.getCommandId());
                        }
                        logger.info("Server->Device InstalledApplicationList:\n" + commandString);
                        result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_InstalledApplicationList");
                    } else if(record.getCommand().equals(IosMdmUtils.Clear)) {
                        logger.info("-------------------ClearPasscode Start---------------");
                        /**发送清除设备密码命令**/
                        String commandString = IosMdmUtils.getClearPassCodePList(IosMdmUtils.Clear, record.getCommandId(), bindRecord);
                        logger.info("Server->Device ClearPasscode:\n" + commandString);
                        result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_ClearPasscode");
                    } else if(record.getCommand().equals(IosMdmUtils.Install)) {
                        logger.info("-------------------InstallApplication Start---------------");
                        /**发送安装APP命令**/
                        String commandString = IosMdmUtils.getInstallApplication(IosMdmUtils.Install, record.getCommandId(), record.getCtype(), record.getCvalue());
                        logger.info("Server->Device InstallApplication:\n" + commandString);
                        result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_InstallApplication");
                    } else if(record.getCommand().equals(IosMdmUtils.Remove)) {
                        logger.info("-------------------RemoveApplication Start---------------");
                        /**发送卸载APP命令**/
                        String commandString = IosMdmUtils.getRemoveApplication(IosMdmUtils.Remove, record.getCommandId(), record.getCvalue());
                        logger.info("Server->Device RemoveApplication:\n" + commandString);
                        result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_RemoveApplication");
                    } else if(record.getCommand().equals(IosMdmUtils.ProfileList)) {
                        logger.info("-------------------ProfileList Start---------------");
                        /**发送获取描述文件列表命令**/
                        String commandString = IosMdmUtils.getCommandPList(IosMdmUtils.ProfileList, record.getCommandId());
                        logger.info("Server->Device ProfileList:\n" + commandString);
                        result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_ProfileList");
                    } else if(record.getCommand().equals(IosMdmUtils.ProvisioningProfileList)) {
                        logger.info("-------------------ProvisioningProfileList Start---------------");
                        /**发送获取预置描述文件列表命令**/
                        String commandString = IosMdmUtils.getCommandPList(IosMdmUtils.ProvisioningProfileList, record.getCommandId());
                        logger.info("Server->Device ProvisioningProfileList:\n" + commandString);
                        result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_ProvisioningProfileList");
                    } else if(record.getCommand().equals(IosMdmUtils.CertificateList)) {
                        logger.info("-------------------CertificateList Start---------------");
                        /**发送获取证书文件命令**/
                        String commandString = IosMdmUtils.getCommandPList(IosMdmUtils.CertificateList, record.getCommandId());
                        logger.info("Server->Device CertificateList:\n" + commandString);
                        result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_CertificateList");
                    } else if(record.getCommand().equals(IosMdmUtils.InstallProfile)){
                        if(IosMdmUtils.BlacklistedURLs.equals(record.getCtype())){
                            logger.info("-------------------InstallFilterUrl Start---------------");
                            /**发送安装过滤网址命令**/
                            List<String> arrayList = new ArrayList<String>();
                            String value = record.getCvalue();
                            String[] arrays = value.split(",");
                            for(int i = 0; i < arrays.length; i++){
                                arrayList.add(arrays[i]);
                            }
                            String dataStr = IosMdmUtils.getContent(IosMdmUtils.BlacklistedURLs,arrayList);
                            BASE64Encoder b64en = new BASE64Encoder();
                            final String data = b64en.encode(dataStr.getBytes());
                            String commandString = IosMdmUtils.getInstallProfile(IosMdmUtils.InstallProfile,record.getCommandId(),data);
                            logger.info("Server->Device InstallFilterUrl:\n" + commandString);
                            result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_InstallFilterUrl");
                        }else if(IosMdmUtils.BlacklistedAppBundleIDs.equals(record.getCtype())){
                            logger.info("-------------------InstallBlackAppsId Start---------------");
                            /**发送安装黑名单软件命令**/
                            List<String> arrayList = new ArrayList<String>();
                            String value = record.getCvalue();
                            String[] arrays = value.split(",");
                            for(int i = 0; i < arrays.length; i++){
                                arrayList.add(arrays[i]);
                            }
                            String dataStr = IosMdmUtils.getContent(IosMdmUtils.BlacklistedAppBundleIDs,arrayList);
                            BASE64Encoder b64en = new BASE64Encoder();
                            final String data = b64en.encode(dataStr.getBytes());
                            String commandString = IosMdmUtils.getInstallProfile(IosMdmUtils.InstallProfile,record.getCommandId(),data);
                            logger.info("Server->Device InstallBlackAppsId:\n" + commandString);
                            result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_InstallBlackAppsId");
                        }else{
                            logger.info("-------------------InstallProfile Start---------------");
                            /**发送安装配置属性命令**/
                            String profileType = record.getCtype();
                            boolean flag = true;
                            if(IosMdmUtils.IS_OFF.equals(record.getCvalue())){
                                flag = false;
                            }
                            String dataStr = IosMdmUtils.getAppsAccess(profileType, flag);
                            BASE64Encoder b64en = new BASE64Encoder();
                            final String data = b64en.encode(dataStr.getBytes());
                            String commandString = IosMdmUtils.getInstallProfile(IosMdmUtils.InstallProfile,record.getCommandId(),data);
                            logger.info("Server->Device InstallProfile:\n" + commandString);
                            result = updateAndSendCommand(result,commandString,record,simpleMybatisDao,"MDMApp_InstallProfile");
                        }
                    }
                }
            }
        } else if(info.contains(IosMdmUtils.Acknowledged)) {
            if (info.contains(IosMdmUtils.QueryResponses)) {
                logger.info("-------------------DeviceInformation Start---------------");
                logger.info("Device->Server DeviceInformation:\n" + info.toString());
                Map<String, String> plistMap = IosMdmUtils.parseInformation(info);
                String CommandUUID = plistMap.get("CommandUUID");
                logger.info("CommandUUID:" + CommandUUID);
                updateAndSendCommand(simpleMybatisDao,CommandUUID,"2",IosMdmUtils.Acknowledged,"2");
                Map<String, Object> updateBindRecord = new HashMap<>();
                if("true".equals(plistMap.get("IsSupervised"))){
                    updateBindRecord.put("isSupervised",1);
                }else{
                    updateBindRecord.put("isSupervised",0);
                }
                if("true".equals(plistMap.get("IsDeviceLocatorServiceEnabled"))){
                    updateBindRecord.put("isDeviceLocatorServiceEnabled",1);
                }else{
                    updateBindRecord.put("isDeviceLocatorServiceEnabled",0);
                }
                if("true".equals(plistMap.get("IsActivationLockEnabled"))){
                    updateBindRecord.put("isActivationLockEnabled",1);
                }else{
                    updateBindRecord.put("isActivationLockEnabled",0);
                }
                if("true".equals(plistMap.get("IsCloudBackupEnabled"))){
                    updateBindRecord.put("isCloudBackupEnabled",1);
                }else{
                    updateBindRecord.put("isCloudBackupEnabled",0);
                }
                updateBindRecord.put("deviceId",deviceId);
                simpleMybatisDao.update("mdm.updateBindRecordByDeviceId",updateBindRecord);
                JSONObject msg = new JSONObject();
                String first = isCommandSource(source);
                msg.put("command_no",first + "300");
                msg.put("version","1.0.0");
                msg.put("command_code","report_device_status");
                msg.put("device_id",bindRecord.getDeviceIdFromDc());
                msg.put("create_time",new Date().getTime());
                JSONObject data = new JSONObject();
                data.put("device_type","02");
                data.put("device_model",plistMap.get("Model"));
                data.put("device_model_name",plistMap.get("ModelName"));
                data.put("os_version",plistMap.get("OSVersion"));
                data.put("imei",plistMap.get("IMEI"));
                data.put("iccid",plistMap.get("ICCID"));
                data.put("meid",plistMap.get("MEID"));
                data.put("wifi_mac",plistMap.get("WiFiMAC"));
                data.put("bluetooth_mac",plistMap.get("BluetoothMAC"));
                data.put("device_capacity",plistMap.get("DeviceCapacity"));
                data.put("available_device_capacity",plistMap.get("AvailableDeviceCapacity"));
                data.put("battery_level",plistMap.get("BatteryLevel"));
                data.put("update_time",new Date());
                msg.put("data",data);
                rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, msg);
                Map<String,String> recordParams = new HashMap<String,String>();
                recordParams.put("commandId",CommandUUID);
                Record record = simpleMybatisDao.selectOne("mdm.findRecordById", recordParams, Record.class);
                JSONObject message = doResult(record,bindRecord.getDeviceIdFromDc(),"02");
                rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, message);
                logger.info("-------------------DeviceInformation End---------------");
            }else if(info.contains(IosMdmUtils.InstalledApplicationList)) {
                logger.info("-------------------InstalledApplicationList Start---------------");
                logger.info("Device->Server InstalledApplicationList:\n" + info.toString());
                Map<String, Map<String, String>> plistMap = IosMdmUtils.parseInstalledApplicationList(info);
                String CommandUUID = plistMap.get(IosMdmUtils.InstalledApplicationList).get("CommandUUID");
                logger.info("CommandUUID:" + CommandUUID);
                Map<String,String> recordParams = new HashMap<String,String>();
                recordParams.put("commandId",CommandUUID);
                Record record = simpleMybatisDao.selectOne("mdm.findRecordById", recordParams, Record.class);
                JSONObject msg = new JSONObject();
                String first = isCommandSource(source);
                msg.put("command_no",first + "301");
                msg.put("version","1.0.0");
                msg.put("command_code","report_device_apps");
                msg.put("device_id",bindRecord.getDeviceIdFromDc());
                msg.put("create_time",new Date().getTime());
                if(record.getCtype().equals("ManagedAppsOnly")){
                    List<JSONObject> list = new ArrayList<JSONObject>();
                    for (String key : plistMap.keySet()) {
                        if(!IosMdmUtils.InstalledApplicationList.equals(key)){
                            Map<String, String> map =  plistMap.get(key);
                            JSONObject app = new JSONObject();
                            app.put("app_name",map.get("Name"));
                            app.put("bundle_id",map.get("Identifier"));
                            app.put("bundle_size",map.get("BundleSize"));
                            app.put("dynamic_data_size",map.get("DynamicSize"));
                            app.put("managed_apps_only","1");
                            app.put("version",map.get("ShortVersion"));
                            list.add(app);
                        }
                    }
                    JSONObject data = new JSONObject();
                    data.put("soft_list",list);
                    msg.put("data",data);
                    rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, msg);
                    JSONObject message = doResult(record,bindRecord.getDeviceIdFromDc(),"02");
                    rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, message);
                }else{
                    List<JSONObject> list = new ArrayList<JSONObject>();
                    for (String key : plistMap.keySet()) {
                        if(!IosMdmUtils.InstalledApplicationList.equals(key)){
                            Map<String, String> map =  plistMap.get(key);
                            JSONObject app = new JSONObject();
                            app.put("app_name",map.get("Name"));
                            app.put("bundle_id",map.get("Identifier"));
                            app.put("bundle_size",map.get("BundleSize"));
                            app.put("dynamic_data_size",map.get("DynamicSize"));
                            app.put("managed_apps_only","0");
                            app.put("version",map.get("ShortVersion"));
                            list.add(app);
                        }
                    }
                    JSONObject data = new JSONObject();
                    data.put("soft_list",list);
                    msg.put("data",data);
                    rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, msg);
                    JSONObject message = doResult(record,bindRecord.getDeviceIdFromDc(),"02");
                    rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, message);
                }
                /**保存处理后的APP列表数据 end**/
                if (record != null) {
                    Map<String,String> params = new HashMap<String,String>();
                    params.put("commandId",record.getCommandId());
                    params.put("doIt","2");
                    params.put("result",IosMdmUtils.InstalledApplicationList);
                    simpleMybatisDao.update("mdm.updateRecord",params);
                    /**异步通知第三方更新**/
                    MDMTaskUtils.sendCommandCallBack(record.getCallBack(), "2", record.getCommandId());
                }
                logger.info("-------------------InstalledApplicationList End---------------");
            } else if(info.contains(IosMdmUtils.ProvisioningProfileList)) {
                logger.info("-------------------ProvisioningProfileList Start---------------");
                logger.info("Device->Server ProvisioningProfileList:\n" + info.toString());
                Map<String, String> plistMap = IosMdmUtils.parseProvisioningProfileList(info);
                for(String key : plistMap.keySet()){
                    logger.info(key + ":" + plistMap.get(key));
                }
                String CommandUUID = plistMap.get("CommandUUID");
                Map<String,String> delProParams = new HashMap<String,String>();
                delProParams.put("deviceId",deviceId);
                delProParams.put("ctype",IosMdmUtils.ProvisioningProfileList);
                simpleMybatisDao.delete("mdm.delProfile",delProParams);
                Map<String,String> addProParams = new HashMap<String,String>();
                addProParams.put("profileId",StringUtil.getUUIDString());
                addProParams.put("ctype",IosMdmUtils.ProvisioningProfileList);
                addProParams.put("deviceId",deviceId);
                addProParams.put("result",info.toString());
                simpleMybatisDao.insert("mdm.addProfile",addProParams);
                logger.info("CommandUUID:" + CommandUUID);
                Map<String,String> recordParams = new HashMap<String,String>();
                recordParams.put("commandId",CommandUUID);
                Record record = simpleMybatisDao.selectOne("mdm.findRecordById", recordParams, Record.class);
                if (record != null) {
                    Map<String,String> params = new HashMap<String,String>();
                    params.put("commandId",record.getCommandId());
                    params.put("doIt","2");
                    params.put("result",IosMdmUtils.ProvisioningProfileList);
                    simpleMybatisDao.update("mdm.updateRecord",params);
                    /**异步通知第三方更新**/
                    MDMTaskUtils.sendCommandCallBack(record.getCallBack(), "2", record.getCommandId());
                }
                logger.info("-------------------ProvisioningProfileList End---------------");
            } else if(info.contains(IosMdmUtils.ProfileList)) {
                logger.info("-------------------ProfileList Start---------------");
                logger.info("Device->Server ProfileList:\n" + info.toString());
                Map<String, String> plistMap = IosMdmUtils.parseProfileList(info);
                for(String key : plistMap.keySet()){
                    logger.info(key +":" + plistMap.get(key));
                }
                String CommandUUID = plistMap.get("CommandUUID");
                Map<String,String> delProParams = new HashMap<String,String>();
                delProParams.put("deviceId",deviceId);
                delProParams.put("ctype",IosMdmUtils.ProfileList);
                simpleMybatisDao.delete("mdm.delProfile",delProParams);
                Map<String,String> addProParams = new HashMap<String,String>();
                addProParams.put("profileId",StringUtil.getUUIDString());
                addProParams.put("ctype",IosMdmUtils.ProfileList);
                addProParams.put("deviceId",deviceId);
                addProParams.put("result",info.toString());
                simpleMybatisDao.insert("mdm.addProfile",addProParams);
                logger.info("CommandUUID:" + CommandUUID);
                Map<String,String> commandParams = new HashMap<String,String>();
                commandParams.put("commandId",CommandUUID);
                Record record = simpleMybatisDao.selectOne("mdm.findRecordById", commandParams, Record.class);
                if (record != null) {
                    Map<String,String> params = new HashMap<String,String>();
                    params.put("commandId",record.getCommandId());
                    params.put("doIt","2");
                    params.put("result",IosMdmUtils.ProfileList);
                    simpleMybatisDao.update("mdm.updateRecord",params);
                    /**异步通知第三方更新**/
                    MDMTaskUtils.sendCommandCallBack(record.getCallBack(), "2", record.getCommandId());
                }
                logger.info("-------------------ProfileList End---------------");
            } else if(info.contains(IosMdmUtils.CertificateList)) {
                logger.info("-------------------CertificateList Start---------------");
                logger.info("Device->Server CertificateList:\n" + info.toString());
                Map<String, String> plistMap = IosMdmUtils.parseCertificateList(info);
                for(String key : plistMap.keySet()){
                    logger.info(key+":" + plistMap.get(key));
                }
                String CommandUUID = plistMap.get("CommandUUID");
                Map<String,String> delProParams = new HashMap<String,String>();
                delProParams.put("deviceId",deviceId);
                delProParams.put("ctype",IosMdmUtils.CertificateList);
                simpleMybatisDao.delete("mdm.delProfile",delProParams);
                Map<String,String> addProParams = new HashMap<String,String>();
                addProParams.put("profileId",StringUtil.getUUIDString());
                addProParams.put("ctype",IosMdmUtils.CertificateList);
                addProParams.put("deviceId",deviceId);
                addProParams.put("result",info.toString());
                simpleMybatisDao.insert("mdm.addProfile",addProParams);
                logger.info("CommandUUID:" + CommandUUID);
                updateAndSendCommand(simpleMybatisDao,CommandUUID,"2",IosMdmUtils.CertificateList,"2");
                logger.info("-------------------CertificateList End---------------");
            } else {
                logger.info("-------------------OtherResult Start---------------");
                logger.info("Device->Server Others:\n" + info.toString());
                Map<String, String> plistMap = IosMdmUtils.parseCommand(info);
                for(String key:plistMap.keySet()){
                    logger.info(key +":"+ plistMap.get(key));
                }
                String CommandUUID = plistMap.get("CommandUUID");
                logger.info("CommandUUID:" + CommandUUID);
                Map<String,String> recordParams = new HashMap<String,String>();
                recordParams.put("commandId",CommandUUID);
                Record record = simpleMybatisDao.selectOne("mdm.findRecordById", recordParams, Record.class);
                if (record != null) {
                    /**将设备标记成已经移除**/
                    String commandstr = record.getCommand() == null ? "" : record.getCommand();
                    if(commandstr.equals(IosMdmUtils.Erase)){
                        Map<String,String> deviceParamsMap = new HashMap<String,String>();
                        deviceParamsMap.put("deviceId",deviceId);
                        deviceParamsMap.put("control","-1");
                        simpleMybatisDao.update("mdm.updateDevice",deviceParamsMap);
                    }
                    Map<String,String> params = new HashMap<String,String>();
                    params.put("commandId",record.getCommandId());
                    params.put("doIt","2");
                    params.put("result",IosMdmUtils.Acknowledged);
                    simpleMybatisDao.update("mdm.updateRecord",params);
                    /**异步通知第三方更新**/
                    MDMTaskUtils.sendCommandCallBack(record.getCallBack(), "2", record.getCommandId());
                    /** 上报应用卸载 **/
                    if(IosMdmUtils.Remove.equals(record.getCommand())){
                        JSONObject jsonData = new JSONObject();
                        jsonData.put("bundle_id", record.getCvalue());
                        String first = isCommandSource(source);
                        JSONObject msgData = new JSONObject();
                        msgData.put("command_no", first + "308");
                        msgData.put("command_code", "report_device_apps");
                        msgData.put("device_id", bindRecord.getDeviceIdFromDc());
                        msgData.put("create_time", new Date());
                        msgData.put("data",jsonData);
                        rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, msgData);
                    }
                }
                JSONObject msg = doResult(record,bindRecord.getDeviceIdFromDc(),"02");
                rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, msg);
                logger.info("-------------------OtherResult End---------------");
            }
        } else if (info.contains(IosMdmUtils.CommandFormatError)) {
            logger.info("-------------------CommandFormatError Start---------------");
            Map<String, String> plistMap = IosMdmUtils.parseCommand(info);
            for(String key:plistMap.keySet()){
                logger.info(key +":"+ plistMap.get(key));
            }
            String CommandUUID = plistMap.get("CommandUUID");
            logger.info("commandUUID:" + CommandUUID);
            updateAndSendCommand(simpleMybatisDao,CommandUUID,"3",info,"3");
            Map<String,String> recordParams = new HashMap<String,String>();
            recordParams.put("commandId",CommandUUID);
            Record record = simpleMybatisDao.selectOne("mdm.findRecordById", recordParams, Record.class);
            JSONObject msg = doResult(record,bindRecord.getDeviceIdFromDc(),"99");
            logger.error("上报数据：" + msg);
            rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, msg);
            logger.info("-------------------CommandFormatError End---------------");
        } else if (info.contains(IosMdmUtils.Error)) {
            logger.info("-------------------Error Start---------------");
            Map<String, String> plistMap = IosMdmUtils.parseCommand(info);
            for(String key:plistMap.keySet()){
                logger.info(key +":"+ plistMap.get(key));
            }
            String CommandUUID = plistMap.get("CommandUUID");
            logger.info("commandUUID:" + CommandUUID);
            updateAndSendCommand(simpleMybatisDao,CommandUUID,"3",info,"3");
            Map<String,String> recordParams = new HashMap<String,String>();
            recordParams.put("commandId",CommandUUID);
            Record record = simpleMybatisDao.selectOne("mdm.findRecordById", recordParams, Record.class);
            JSONObject msg = doResult(record,bindRecord.getDeviceIdFromDc(),"99");
            rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, msg);
            logger.error("上报数据：" + msg);
            logger.info("-------------------Error End---------------");
        } else if (info.contains(IosMdmUtils.NotNow)) {
            logger.info("-------------------NotNow Start---------------");
            Map<String, String> plistMap = IosMdmUtils.parseCommand(info);
            for(String key : plistMap.keySet()){
                logger.info(key +":" + plistMap.get(key));
            }
            String CommandUUID = plistMap.get("CommandUUID");
            logger.info("commandUUID:" + CommandUUID);
            updateAndSendCommand(simpleMybatisDao,CommandUUID,"","NotNow","0");
            Map<String,String> recordParams = new HashMap<String,String>();
            recordParams.put("commandId",CommandUUID);
            Record record = simpleMybatisDao.selectOne("mdm.findRecordById", recordParams, Record.class);
            JSONObject msg = doResult(record,bindRecord.getDeviceIdFromDc(),"99");
            rabbitTemplate.convertAndSend(Constants.RMQ_GNW_PUSH_IOSMDM_QUEUE, msg);
            logger.error("上报数据：" + msg);
            logger.info("-------------------NotNow End---------------");
        }
        return result.toJSONString();
    }

    /**
     * 更新记录和异步通知
     *
     * @param result
     * @param commandString
     * @param record
     * @param simpleMybatisDao
     * @param configTitle
     * @return
     */
    private JSONObject updateAndSendCommand(JSONObject result,String commandString,Record record,SimpleMybatisDao simpleMybatisDao,String configTitle){
        Map<String, String> params = new HashMap<String, String>();
        params.put("commandId", record.getCommandId());
        params.put("doIt", "1");
        simpleMybatisDao.update("mdm.updateRecord", params);
        /**异步通知第三方更新**/
        MDMTaskUtils.sendCommandCallBack(record.getCallBack(), "1", record.getCommandId());
        result.put("configTitle",configTitle);
        result.put("commandString",commandString);
        return result;
    }

    /**
     * 更新记录和异步通知
     *
     * @param simpleMybatisDao
     * @param commandUUID
     * @param doIt
     * @param result
     * @param status
     */
    private void updateAndSendCommand(SimpleMybatisDao simpleMybatisDao,String commandUUID,String doIt,String result,String status){
        Map<String,String> recordParams = new HashMap<String,String>();
        recordParams.put("commandId",commandUUID);
        Record record = simpleMybatisDao.selectOne("mdm.findRecordById", recordParams, Record.class);
        if (record != null) {
            Map<String,String> params = new HashMap<String,String>();
            params.put("commandId",record.getCommandId());
            if(!StringUtil.isBlank(doIt)){
                params.put("doIt",doIt);
            }
            if(!StringUtil.isBlank(result)){
                params.put("result",result);
            }
            simpleMybatisDao.update("mdm.updateRecord",params);
            /**异步通知第三方更新**/
            MDMTaskUtils.sendCommandCallBack(record.getCallBack(), status, record.getCommandId());
        }
    }

    /**
     * 设备中心回执
     *
     * @param record
     * @param deviceIdFromDc
     * @param status
     */
    private JSONObject doResult(Record record,String deviceIdFromDc,String status){
        JSONObject msg = new JSONObject();
        String first = "";
        if(IosMdmUtils.GNW_DEF_PARENT.equals(record.getSource()) || IosMdmUtils.GNW_DEF_CHILDREN.equals(record.getSource())){
            msg.put("command_no","9999");
            first = "1";
        }else if(IosMdmUtils.GNW_BOX_PARENT.equals(record.getSource()) || IosMdmUtils.GNW_BOX_CHILDREN.equals(record.getSource())){
            msg.put("command_no","9998");
            first = "2";
        }else{
            msg.put("command_no","");
        }
        msg.put("device_id",deviceIdFromDc);
        msg.put("create_time",new Date().getTime());
        JSONObject data = new JSONObject();
        List<JSONObject> receipts = new ArrayList<JSONObject>();
        JSONObject receipt = new JSONObject();
        receipt.put("record_id",record.getAttach());
        receipt.put("frontend_exec_time",new Date().getTime());
        if(IosMdmUtils.Lock.equals(record.getCommand())){
            msg.put("command_code","control_device_lock");
            receipt.put("target_command_no",first + "206");
        }else if(IosMdmUtils.Install.equals(record.getCommand())){
            msg.put("command_code","control_device_app_install");
            receipt.put("target_command_no",first + "204");
        }else if(IosMdmUtils.Remove.equals(record.getCommand())){
            msg.put("command_code","control_device_app_uninstall");
            receipt.put("target_command_no",first + "205");
        }else if(IosMdmUtils.Info.equals(record.getCommand())){
            msg.put("command_code","report_device_state");
            receipt.put("target_command_no",first + "300");
        }else if(IosMdmUtils.Apps.equals(record.getCommand())){
            msg.put("command_code","report_device_apps");
            receipt.put("target_command_no",first + "301");
        }else{
            if(IosMdmUtils.BlacklistedURLs.equals(record.getCtype())){
                msg.put("command_code","control_device_iosmdm_url_filter");
                receipt.put("target_command_no",first + "20E");
            }else if(IosMdmUtils.BlacklistedAppBundleIDs.equals(record.getCtype())){
                msg.put("command_code","control_device_iosmdm_app_blacklist");
                receipt.put("target_command_no",first + "20D");
            }else {
                msg.put("command_code","control_device_iosmdm_system_app");
                receipt.put("target_command_no",first + "20C");
            }
        }
        receipt.put("frontend_arrive_time",new Date().getTime());
        receipt.put("status",status);
        String attach = record.getAttach();
        JSONObject jsonObject = JSONObject.parseObject(attach);
        receipt.put("create_time",jsonObject.getLongValue("createTime"));
        receipts.add(receipt);
        data.put("receipts",receipts);
        msg.put("create_time",record.getCreateTime().getTime());
        msg.put("data",data);
        return msg;
    }

    /**
     * 获取指令首位值
     *
     * @param source
     * @return
     */
    private String isCommandSource(String source){
        String first = "";
        if(IosMdmUtils.GNW_DEF_PARENT.equals(source) || IosMdmUtils.GNW_DEF_CHILDREN.equals(source)){
            first = "1";
        }else if(IosMdmUtils.GNW_BOX_PARENT.equals(source) || IosMdmUtils.GNW_BOX_CHILDREN.equals(source)){
            first = "2";
        }else{
            first = "";
        }
        return first;
    }
}
