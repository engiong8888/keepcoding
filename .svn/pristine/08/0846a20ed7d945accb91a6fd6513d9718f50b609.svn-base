package cn.gnw.push.provider.service;

import cn.gnw.pub.base.db.SimpleMybatisDao;
import cn.gnw.pub.base.impl.BaseBS;
import cn.gnw.pub.base.utils.SpringUtil;
import cn.gnw.pub.base.utils.UniqueKeyUtil;
import cn.gnw.push.api.entity.Constants;
import cn.gnw.push.api.utils.MailUtil;
import cn.gnw.push.api.utils.PushMailUtil;
import com.alibaba.fastjson.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * 邮件推送
 * @author: chengzd
 * @mail chengzd@txtws.com
 * @date: 2018-09-19 9:07
 */
@Service
public class MailPushService extends BaseBS {

    private Logger logger = LoggerFactory.getLogger(getClass());
    /**
     * 邮件推送
     * @param params
     * @return
     */
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = 36000, rollbackFor = Exception.class)
    public JSONObject send(Map<String, String> params){
        JSONObject result = new JSONObject();

        String recordId = UniqueKeyUtil.getKey(new Date());
        params.put("record_id", recordId);
//        params.put("from_mail", Constants.FROM_MAIL);
        SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
        int count = simpleMybatisDao.insert("push.mail.addPushMailRecord", params);
        if(count > 0) {
            JSONObject payMsg = PushMailUtil.getInstance().toPushMailInQueue(params);
            getLogger().info("邮件推送信息入队列：" + payMsg);

            result.put("status", 0);
            result.put("message", "success");
        }else{
            result.put("status", -1);
            result.put("message", "mail record insert error");
        }
        return result;
    }

    /**
     * 发送邮件
     * @param to
     * @param subject
     * @param messageText
     * @return
     */
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = 36000, rollbackFor = Exception.class)
    public JSONObject sendMail(String fromMail, String fromMailPwd, String recordId, String to, String subject, String messageText) {
        JSONObject result = new JSONObject();
        Map<String, String> params = new HashMap<String, String>();
        params.put("record_id", recordId);
        SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
        MailUtil mu = new MailUtil(fromMail, fromMailPwd);
        result = mu.toSendMail(to, subject, messageText);
        getLogger().info("邮件推送信息. 结果{}：" + result.toString());
        if(result != null){
            if(result.getIntValue("status") == 0) {
                params.put("result", "1");
            } else {
                params.put("result", "0");
            }
            params.put("remark", result.toString());
            simpleMybatisDao.insert("push.mail.updatePushMailRecord",params);
        }
        return result;
    }

    /**
     * 增加邮件配置
     * @param params
     * @return
     */
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = 36000, rollbackFor = Exception.class)
    public JSONObject addConfig(JSONObject params){
        JSONObject result = new JSONObject();
        String configId = UniqueKeyUtil.getKey(new Date());

        params.put("mail_config_id", configId);
        SimpleMybatisDao simpleMybatisDao = SpringUtil.getBean("simpleMybatisDao", SimpleMybatisDao.class);
        int count = simpleMybatisDao.insert("push.mail.addPushMailConfig", params);
        if(count > 0) {
            result.put("status", "0");
            result.put("message", "success");
        } else {
            result.put("status", "-1");
            result.put("message", "mail config insert error");
        }
        return result;
    }
}
